[
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "RepoAgent",
        "importPath": "gots.repo_agent",
        "description": "gots.repo_agent",
        "isExtraImport": true,
        "detail": "gots.repo_agent",
        "documentation": {}
    },
    {
        "label": "WriteRepoInp",
        "importPath": "gots.repo_agent",
        "description": "gots.repo_agent",
        "isExtraImport": true,
        "detail": "gots.repo_agent",
        "documentation": {}
    },
    {
        "label": "WriteRepoOut",
        "importPath": "gots.repo_agent",
        "description": "gots.repo_agent",
        "isExtraImport": true,
        "detail": "gots.repo_agent",
        "documentation": {}
    },
    {
        "label": "RepoAgent",
        "importPath": "gots.repo_agent",
        "description": "gots.repo_agent",
        "isExtraImport": true,
        "detail": "gots.repo_agent",
        "documentation": {}
    },
    {
        "label": "WriteRepoInp",
        "importPath": "gots.repo_agent",
        "description": "gots.repo_agent",
        "isExtraImport": true,
        "detail": "gots.repo_agent",
        "documentation": {}
    },
    {
        "label": "WriteRepoOut",
        "importPath": "gots.repo_agent",
        "description": "gots.repo_agent",
        "isExtraImport": true,
        "detail": "gots.repo_agent",
        "documentation": {}
    },
    {
        "label": "gots_repo_agent",
        "importPath": "gots.repo_agent",
        "description": "gots.repo_agent",
        "isExtraImport": true,
        "detail": "gots.repo_agent",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Repo",
        "importPath": "git",
        "description": "git",
        "isExtraImport": true,
        "detail": "git",
        "documentation": {}
    },
    {
        "label": "Repo",
        "importPath": "git",
        "description": "git",
        "isExtraImport": true,
        "detail": "git",
        "documentation": {}
    },
    {
        "label": "Head",
        "importPath": "git",
        "description": "git",
        "isExtraImport": true,
        "detail": "git",
        "documentation": {}
    },
    {
        "label": "InvalidGitRepositoryError",
        "importPath": "git",
        "description": "git",
        "isExtraImport": true,
        "detail": "git",
        "documentation": {}
    },
    {
        "label": "NoSuchPathError",
        "importPath": "git",
        "description": "git",
        "isExtraImport": true,
        "detail": "git",
        "documentation": {}
    },
    {
        "label": "Repo",
        "importPath": "git",
        "description": "git",
        "isExtraImport": true,
        "detail": "git",
        "documentation": {}
    },
    {
        "label": "Head",
        "importPath": "git",
        "description": "git",
        "isExtraImport": true,
        "detail": "git",
        "documentation": {}
    },
    {
        "label": "Repo",
        "importPath": "git",
        "description": "git",
        "isExtraImport": true,
        "detail": "git",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Github",
        "importPath": "github",
        "description": "github",
        "isExtraImport": true,
        "detail": "github",
        "documentation": {}
    },
    {
        "label": "Github",
        "importPath": "github",
        "description": "github",
        "isExtraImport": true,
        "detail": "github",
        "documentation": {}
    },
    {
        "label": "Github",
        "importPath": "github",
        "description": "github",
        "isExtraImport": true,
        "detail": "github",
        "documentation": {}
    },
    {
        "label": "GithubException",
        "importPath": "github",
        "description": "github",
        "isExtraImport": true,
        "detail": "github",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "github.Auth",
        "description": "github.Auth",
        "isExtraImport": true,
        "detail": "github.Auth",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "pydantic.dataclasses",
        "description": "pydantic.dataclasses",
        "isExtraImport": true,
        "detail": "pydantic.dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "pydantic.dataclasses",
        "description": "pydantic.dataclasses",
        "isExtraImport": true,
        "detail": "pydantic.dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "pydantic.dataclasses",
        "description": "pydantic.dataclasses",
        "isExtraImport": true,
        "detail": "pydantic.dataclasses",
        "documentation": {}
    },
    {
        "label": "PullRequest",
        "importPath": "github.PullRequest",
        "description": "github.PullRequest",
        "isExtraImport": true,
        "detail": "github.PullRequest",
        "documentation": {}
    },
    {
        "label": "Repository",
        "importPath": "github.Repository",
        "description": "github.Repository",
        "isExtraImport": true,
        "detail": "github.Repository",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "AgentType",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "initialize_agent",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "load_tools",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "AgentType",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "initialize_agent",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "AgentType",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "initialize_agent",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "tracing_enabled",
        "importPath": "langchain.callbacks",
        "description": "langchain.callbacks",
        "isExtraImport": true,
        "detail": "langchain.callbacks",
        "documentation": {}
    },
    {
        "label": "BaseCallbackHandler",
        "importPath": "langchain.callbacks.base",
        "description": "langchain.callbacks.base",
        "isExtraImport": true,
        "detail": "langchain.callbacks.base",
        "documentation": {}
    },
    {
        "label": "BaseCallbackHandler",
        "importPath": "langchain.callbacks.base",
        "description": "langchain.callbacks.base",
        "isExtraImport": true,
        "detail": "langchain.callbacks.base",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "CopyFileTool",
        "importPath": "langchain.tools.file_management",
        "description": "langchain.tools.file_management",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management",
        "documentation": {}
    },
    {
        "label": "DeleteFileTool",
        "importPath": "langchain.tools.file_management",
        "description": "langchain.tools.file_management",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management",
        "documentation": {}
    },
    {
        "label": "ListDirectoryTool",
        "importPath": "langchain.tools.file_management",
        "description": "langchain.tools.file_management",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management",
        "documentation": {}
    },
    {
        "label": "MoveFileTool",
        "importPath": "langchain.tools.file_management",
        "description": "langchain.tools.file_management",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management",
        "documentation": {}
    },
    {
        "label": "ReadFileTool",
        "importPath": "langchain.tools.file_management",
        "description": "langchain.tools.file_management",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management",
        "documentation": {}
    },
    {
        "label": "WriteFileTool",
        "importPath": "langchain.tools.file_management",
        "description": "langchain.tools.file_management",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management",
        "documentation": {}
    },
    {
        "label": "CopyFileTool",
        "importPath": "langchain.tools.file_management",
        "description": "langchain.tools.file_management",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management",
        "documentation": {}
    },
    {
        "label": "DeleteFileTool",
        "importPath": "langchain.tools.file_management",
        "description": "langchain.tools.file_management",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management",
        "documentation": {}
    },
    {
        "label": "ListDirectoryTool",
        "importPath": "langchain.tools.file_management",
        "description": "langchain.tools.file_management",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management",
        "documentation": {}
    },
    {
        "label": "MoveFileTool",
        "importPath": "langchain.tools.file_management",
        "description": "langchain.tools.file_management",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management",
        "documentation": {}
    },
    {
        "label": "ReadFileTool",
        "importPath": "langchain.tools.file_management",
        "description": "langchain.tools.file_management",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management",
        "documentation": {}
    },
    {
        "label": "AsyncCallbackManagerForToolRun",
        "importPath": "langchain.callbacks.manager",
        "description": "langchain.callbacks.manager",
        "isExtraImport": true,
        "detail": "langchain.callbacks.manager",
        "documentation": {}
    },
    {
        "label": "CallbackManagerForToolRun",
        "importPath": "langchain.callbacks.manager",
        "description": "langchain.callbacks.manager",
        "isExtraImport": true,
        "detail": "langchain.callbacks.manager",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "langchain.tools.base",
        "description": "langchain.tools.base",
        "isExtraImport": true,
        "detail": "langchain.tools.base",
        "documentation": {}
    },
    {
        "label": "INVALID_PATH_TEMPLATE",
        "importPath": "langchain.tools.file_management.utils",
        "description": "langchain.tools.file_management.utils",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management.utils",
        "documentation": {}
    },
    {
        "label": "BaseFileToolMixin",
        "importPath": "langchain.tools.file_management.utils",
        "description": "langchain.tools.file_management.utils",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management.utils",
        "documentation": {}
    },
    {
        "label": "FileValidationError",
        "importPath": "langchain.tools.file_management.utils",
        "description": "langchain.tools.file_management.utils",
        "isExtraImport": true,
        "detail": "langchain.tools.file_management.utils",
        "documentation": {}
    },
    {
        "label": "langchain",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "langchain",
        "description": "langchain",
        "detail": "langchain",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain.chat_models",
        "description": "langchain.chat_models",
        "isExtraImport": true,
        "detail": "langchain.chat_models",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain.chat_models",
        "description": "langchain.chat_models",
        "isExtraImport": true,
        "detail": "langchain.chat_models",
        "documentation": {}
    },
    {
        "label": "mock_repo_agent",
        "kind": 2,
        "importPath": "gothub.src.gothub.tests.test_order",
        "description": "gothub.src.gothub.tests.test_order",
        "peekOfCode": "def mock_repo_agent(inp: WriteRepoInp) -> WriteRepoOut:\n    match inp:\n        case WriteRepoInp(\n            repo=repo,\n            openai_api_key=openai_api_key,\n            extra_prompt=extra_prompt,\n        ):\n            pass\n    time = datetime.now().strftime(\"%Y-%m-%d_%H_%M_%S_%f\")\n    original_branch = repo.active_branch",
        "detail": "gothub.src.gothub.tests.test_order",
        "documentation": {}
    },
    {
        "label": "test_order_mock_repo_agent",
        "kind": 2,
        "importPath": "gothub.src.gothub.tests.test_order",
        "description": "gothub.src.gothub.tests.test_order",
        "peekOfCode": "def test_order_mock_repo_agent():\n    inp = GithubOrderInp(\n        username=TESTS_USERNAME,\n        https_url=TEST_HTTPS_URL,\n        github_token=GITHUB_TOKEN,\n        openai_api_key=OPENAI_API_KEY,\n        branch_name=None,\n        extra_prompt=None,\n        repo_agent=mock_repo_agent,\n    )",
        "detail": "gothub.src.gothub.tests.test_order",
        "documentation": {}
    },
    {
        "label": "test_order_gots_repo_agent",
        "kind": 2,
        "importPath": "gothub.src.gothub.tests.test_order",
        "description": "gothub.src.gothub.tests.test_order",
        "peekOfCode": "def test_order_gots_repo_agent():\n    inp = GithubOrderInp(\n        username=TESTS_USERNAME,\n        https_url=TEST_HTTPS_URL,\n        github_token=GITHUB_TOKEN,\n        openai_api_key=OPENAI_API_KEY,\n        branch_name=None,\n        extra_prompt=None,\n        repo_agent=None,\n    )",
        "detail": "gothub.src.gothub.tests.test_order",
        "documentation": {}
    },
    {
        "label": "TESTS_USERNAME",
        "kind": 5,
        "importPath": "gothub.src.gothub.tests.test_order",
        "description": "gothub.src.gothub.tests.test_order",
        "peekOfCode": "TESTS_USERNAME = \"../tests/\"\nTESTS_BRANCH_DIR = \"gothub_mock/\"\ndef mock_repo_agent(inp: WriteRepoInp) -> WriteRepoOut:\n    match inp:\n        case WriteRepoInp(\n            repo=repo,\n            openai_api_key=openai_api_key,\n            extra_prompt=extra_prompt,\n        ):\n            pass",
        "detail": "gothub.src.gothub.tests.test_order",
        "documentation": {}
    },
    {
        "label": "TESTS_BRANCH_DIR",
        "kind": 5,
        "importPath": "gothub.src.gothub.tests.test_order",
        "description": "gothub.src.gothub.tests.test_order",
        "peekOfCode": "TESTS_BRANCH_DIR = \"gothub_mock/\"\ndef mock_repo_agent(inp: WriteRepoInp) -> WriteRepoOut:\n    match inp:\n        case WriteRepoInp(\n            repo=repo,\n            openai_api_key=openai_api_key,\n            extra_prompt=extra_prompt,\n        ):\n            pass\n    time = datetime.now().strftime(\"%Y-%m-%d_%H_%M_%S_%f\")",
        "detail": "gothub.src.gothub.tests.test_order",
        "documentation": {}
    },
    {
        "label": "test_mkdir_if_available_else_error",
        "kind": 2,
        "importPath": "gothub.src.gothub.tests.test_setup_repo",
        "description": "gothub.src.gothub.tests.test_setup_repo",
        "peekOfCode": "def test_mkdir_if_available_else_error():\n    time = datetime.now().strftime(\"%Y-%m-%d %H_%M_%S_%f\")\n    dir = \"test_mkdir_if_available_else_error\" + time\n    path = Path(SETUP_BASE_DIR / SETUP_TESTS_BASE_DIR / dir)\n    mkdir_if_available_else_error(path)\n    assert path.exists()\ndef test_setup_repo_default_branch():\n    time = datetime.now().strftime(\"%Y-%m-%d %H_%M_%S_%f\")\n    dir = SETUP_TESTS_BASE_DIR + \"test_setup_repo_default_branch\" + time\n    inp = SetupRepoInp(",
        "detail": "gothub.src.gothub.tests.test_setup_repo",
        "documentation": {}
    },
    {
        "label": "test_setup_repo_default_branch",
        "kind": 2,
        "importPath": "gothub.src.gothub.tests.test_setup_repo",
        "description": "gothub.src.gothub.tests.test_setup_repo",
        "peekOfCode": "def test_setup_repo_default_branch():\n    time = datetime.now().strftime(\"%Y-%m-%d %H_%M_%S_%f\")\n    dir = SETUP_TESTS_BASE_DIR + \"test_setup_repo_default_branch\" + time\n    inp = SetupRepoInp(\n        setup_dir=dir,\n        https_url=TEST_HTTPS_URL,\n        github_token=GITHUB_TOKEN,\n        branch_name=None,\n    )\n    with setup_repo(inp) as repo:",
        "detail": "gothub.src.gothub.tests.test_setup_repo",
        "documentation": {}
    },
    {
        "label": "test_setup_repo_other_branch",
        "kind": 2,
        "importPath": "gothub.src.gothub.tests.test_setup_repo",
        "description": "gothub.src.gothub.tests.test_setup_repo",
        "peekOfCode": "def test_setup_repo_other_branch():\n    time = datetime.now().strftime(\"%Y-%m-%d %H_%M_%S_%f\")\n    dir = SETUP_TESTS_BASE_DIR + \"test_setup_repo_other_branch\" + time\n    inp = SetupRepoInp(\n        setup_dir=dir,\n        https_url=TEST_HTTPS_URL,\n        github_token=GITHUB_TOKEN,\n        branch_name=OTHER_BRANCH,\n    )\n    with setup_repo(inp) as repo:",
        "detail": "gothub.src.gothub.tests.test_setup_repo",
        "documentation": {}
    },
    {
        "label": "SETUP_TESTS_BASE_DIR",
        "kind": 5,
        "importPath": "gothub.src.gothub.tests.test_setup_repo",
        "description": "gothub.src.gothub.tests.test_setup_repo",
        "peekOfCode": "SETUP_TESTS_BASE_DIR = \"tests/\"\ndef test_mkdir_if_available_else_error():\n    time = datetime.now().strftime(\"%Y-%m-%d %H_%M_%S_%f\")\n    dir = \"test_mkdir_if_available_else_error\" + time\n    path = Path(SETUP_BASE_DIR / SETUP_TESTS_BASE_DIR / dir)\n    mkdir_if_available_else_error(path)\n    assert path.exists()\ndef test_setup_repo_default_branch():\n    time = datetime.now().strftime(\"%Y-%m-%d %H_%M_%S_%f\")\n    dir = SETUP_TESTS_BASE_DIR + \"test_setup_repo_default_branch\" + time",
        "detail": "gothub.src.gothub.tests.test_setup_repo",
        "documentation": {}
    },
    {
        "label": "GithubOrderInp",
        "kind": 6,
        "importPath": "gothub.src.gothub.order",
        "description": "gothub.src.gothub.order",
        "peekOfCode": "class GithubOrderInp:\n    username: str\n    https_url: str\n    github_token: str\n    openai_api_key: str\n    branch_name: Optional[str]\n    extra_prompt: Optional[str]\n    repo_agent: Optional[RepoAgent]\n@dataclass\nclass GithubOrderOut:",
        "detail": "gothub.src.gothub.order",
        "documentation": {}
    },
    {
        "label": "GithubOrderOut",
        "kind": 6,
        "importPath": "gothub.src.gothub.order",
        "description": "gothub.src.gothub.order",
        "peekOfCode": "class GithubOrderOut:\n    order_id: str\n    pull_requests: list[GothubPullRequest]\ndef take_order(inp: GithubOrderInp) -> GithubOrderOut:\n    match inp:\n        case GithubOrderInp(\n            username=username,\n            https_url=https_url,\n            github_token=github_token,\n            openai_api_key=openai_api_key,",
        "detail": "gothub.src.gothub.order",
        "documentation": {}
    },
    {
        "label": "take_order",
        "kind": 2,
        "importPath": "gothub.src.gothub.order",
        "description": "gothub.src.gothub.order",
        "peekOfCode": "def take_order(inp: GithubOrderInp) -> GithubOrderOut:\n    match inp:\n        case GithubOrderInp(\n            username=username,\n            https_url=https_url,\n            github_token=github_token,\n            openai_api_key=openai_api_key,\n            branch_name=branch_name,\n            extra_prompt=extra_prompt,\n            repo_agent=repo_agent,",
        "detail": "gothub.src.gothub.order",
        "documentation": {}
    },
    {
        "label": "SETUP_ORDERS_BASE_DIR",
        "kind": 5,
        "importPath": "gothub.src.gothub.order",
        "description": "gothub.src.gothub.order",
        "peekOfCode": "SETUP_ORDERS_BASE_DIR = \"orders/\"\n@dataclass\nclass GithubOrderInp:\n    username: str\n    https_url: str\n    github_token: str\n    openai_api_key: str\n    branch_name: Optional[str]\n    extra_prompt: Optional[str]\n    repo_agent: Optional[RepoAgent]",
        "detail": "gothub.src.gothub.order",
        "documentation": {}
    },
    {
        "label": "SetupRepoInp",
        "kind": 6,
        "importPath": "gothub.src.gothub.setup_repo",
        "description": "gothub.src.gothub.setup_repo",
        "peekOfCode": "class SetupRepoInp:\n    setup_dir: str\n    https_url: str\n    github_token: str\n    branch_name: Optional[str]\ndef mkdir_if_available_else_error(path: Path):\n    if path.exists():\n        raise FileExistsError(f\"Path {path} already exists.\")\n    else:\n        path.mkdir()",
        "detail": "gothub.src.gothub.setup_repo",
        "documentation": {}
    },
    {
        "label": "mkdir_if_available_else_error",
        "kind": 2,
        "importPath": "gothub.src.gothub.setup_repo",
        "description": "gothub.src.gothub.setup_repo",
        "peekOfCode": "def mkdir_if_available_else_error(path: Path):\n    if path.exists():\n        raise FileExistsError(f\"Path {path} already exists.\")\n    else:\n        path.mkdir()\ndef setup_repo(inp: SetupRepoInp) -> Repo:\n    match inp:\n        case SetupRepoInp(\n            setup_dir=setup_dir,\n            https_url=https_url,",
        "detail": "gothub.src.gothub.setup_repo",
        "documentation": {}
    },
    {
        "label": "setup_repo",
        "kind": 2,
        "importPath": "gothub.src.gothub.setup_repo",
        "description": "gothub.src.gothub.setup_repo",
        "peekOfCode": "def setup_repo(inp: SetupRepoInp) -> Repo:\n    match inp:\n        case SetupRepoInp(\n            setup_dir=setup_dir,\n            https_url=https_url,\n            github_token=github_token,\n            branch_name=branch_name,\n        ):\n            pass\n    dir = SETUP_BASE_DIR / setup_dir",
        "detail": "gothub.src.gothub.setup_repo",
        "documentation": {}
    },
    {
        "label": "SETUP_BASE_DIR",
        "kind": 5,
        "importPath": "gothub.src.gothub.setup_repo",
        "description": "gothub.src.gothub.setup_repo",
        "peekOfCode": "SETUP_BASE_DIR = Path(\"./repos\")\n@dataclass\nclass SetupRepoInp:\n    setup_dir: str\n    https_url: str\n    github_token: str\n    branch_name: Optional[str]\ndef mkdir_if_available_else_error(path: Path):\n    if path.exists():\n        raise FileExistsError(f\"Path {path} already exists.\")",
        "detail": "gothub.src.gothub.setup_repo",
        "documentation": {}
    },
    {
        "label": "GothubPullRequest",
        "kind": 6,
        "importPath": "gothub.src.gothub.write_github",
        "description": "gothub.src.gothub.write_github",
        "peekOfCode": "class GothubPullRequest(BaseModel):\n    pr: PullRequest\n    class Config:\n        arbitrary_types_allowed = True\ndef create_pull_request(github_repo: Repository, branch: Head) -> GothubPullRequest:\n    branch_name = branch.name\n    base_branch = github_repo.default_branch\n    pr = github_repo.create_pull(\n        title=f\"PR for: {branch_name}\",\n        body=f\"This is a pull request for changes in the branch: {branch_name}\",",
        "detail": "gothub.src.gothub.write_github",
        "documentation": {}
    },
    {
        "label": "create_pull_request",
        "kind": 2,
        "importPath": "gothub.src.gothub.write_github",
        "description": "gothub.src.gothub.write_github",
        "peekOfCode": "def create_pull_request(github_repo: Repository, branch: Head) -> GothubPullRequest:\n    branch_name = branch.name\n    base_branch = github_repo.default_branch\n    pr = github_repo.create_pull(\n        title=f\"PR for: {branch_name}\",\n        body=f\"This is a pull request for changes in the branch: {branch_name}\",\n        head=branch_name,  # name of the branch you want to merge\n        base=base_branch,\n    )\n    return GothubPullRequest(",
        "detail": "gothub.src.gothub.write_github",
        "documentation": {}
    },
    {
        "label": "git_methods",
        "kind": 6,
        "importPath": "gots.src.gots.callbacks.utils.git_methods",
        "description": "gots.src.gots.callbacks.utils.git_methods",
        "peekOfCode": "class git_methods:\n    def __init__(self, repo_url, local_dir, access_token):\n        self.repo_url = repo_url\n        self.local_dir = local_dir\n        self.github = Github(access_token)\n        try:\n            self.gh_repo = self.github.get_repo(\"Git-of-Thoughts/Gothub\")\n            self.repo = Repo(self.local_dir)\n        except InvalidGitRepositoryError:\n            self.repo = Repo.init(self.local_dir)",
        "detail": "gots.src.gots.callbacks.utils.git_methods",
        "documentation": {}
    },
    {
        "label": "MyCustomHandlerOne",
        "kind": 6,
        "importPath": "gots.src.gots.callbacks.CallbackHandler",
        "description": "gots.src.gots.callbacks.CallbackHandler",
        "peekOfCode": "class MyCustomHandlerOne(BaseCallbackHandler):\n    def __init__(self, git_methods_instance: git_methods):\n        self.git = git_methods_instance\n    def on_tool_start(\n        self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any\n    ) -> Any:\n        \"\"\"Run when chain starts running.\"\"\"\n    def on_tool_end(self, outputs: Dict[str, Any], **kwargs: Any) -> Any:\n        \"\"\"Run when chain ends running.\"\"\"\n        self.git.commit_changes(outputs)",
        "detail": "gots.src.gots.callbacks.CallbackHandler",
        "documentation": {}
    },
    {
        "label": "GitCallbackHandler",
        "kind": 6,
        "importPath": "gots.src.gots.callbacks.git_callback_handler",
        "description": "gots.src.gots.callbacks.git_callback_handler",
        "peekOfCode": "class GitCallbackHandler(BaseCallbackHandler):\n    def __init__(self):\n        pass\n    def on_tool_start(\n        self,\n        serialized: Dict[str, Any],\n        inputs: Dict[str, Any],\n        **kwargs: Any,\n    ) -> Any:\n        \"\"\"Run when chain starts running.\"\"\"",
        "detail": "gots.src.gots.callbacks.git_callback_handler",
        "documentation": {}
    },
    {
        "label": "read_one_file_tool",
        "kind": 5,
        "importPath": "gots.src.gots.tools.file_tools",
        "description": "gots.src.gots.tools.file_tools",
        "peekOfCode": "read_one_file_tool = Tool(\n    name=\"read_one_file\",\n    func=ReadFileTool().run,\n    description=\"\"\"\n        Useful when you want to get the contents inside a file in a specified file path.\n        You should enter the file path recognized by the file.\n        If you can not find the file,\n        \"\"\",\n)\nread_directory_tree_tool = Tool(",
        "detail": "gots.src.gots.tools.file_tools",
        "documentation": {}
    },
    {
        "label": "read_directory_tree_tool",
        "kind": 5,
        "importPath": "gots.src.gots.tools.file_tools",
        "description": "gots.src.gots.tools.file_tools",
        "peekOfCode": "read_directory_tree_tool = Tool(\n    name=\"read_directory_tree\",\n    func=ListDirectoryTool().run,\n    description=\"\"\"\n        Useful when you need to know what files are contained in this project.\n        You should run this to record the file directory tree when you need to.\n        \"\"\",\n)\nwrite_file_tool = Tool(\n    name=\"write_file\",",
        "detail": "gots.src.gots.tools.file_tools",
        "documentation": {}
    },
    {
        "label": "write_file_tool",
        "kind": 5,
        "importPath": "gots.src.gots.tools.file_tools",
        "description": "gots.src.gots.tools.file_tools",
        "peekOfCode": "write_file_tool = Tool(\n    name=\"write_file\",\n    func=WriteFileTool().run,\n    description=\"\"\"\n        Useful when you want to write files.\n        You should run this to write the file where you need to.\n        \"\"\",\n)",
        "detail": "gots.src.gots.tools.file_tools",
        "documentation": {}
    },
    {
        "label": "build_scoped_file_tools",
        "kind": 2,
        "importPath": "gots.src.gots.tools.scoped_file_tools",
        "description": "gots.src.gots.tools.scoped_file_tools",
        "peekOfCode": "def build_scoped_file_tools(root_dir: str) -> list[Tool]:\n    read_one_file_tool = Tool(\n        name=\"read_one_file\",\n        func=ReadFileTool(\n            root_dir=root_dir,\n        ).run,\n        description=\"\"\"\nUseful when you want to get the contents inside a file in a specified file path.\nYou should enter the file path recognized by the file. If you can not find the file,\n\"\"\",",
        "detail": "gots.src.gots.tools.scoped_file_tools",
        "documentation": {}
    },
    {
        "label": "MyCreateToolInput",
        "kind": 6,
        "importPath": "gots.src.gots.tools.scoped_file_tools_funcs",
        "description": "gots.src.gots.tools.scoped_file_tools_funcs",
        "peekOfCode": "class MyCreateToolInput(BaseModel):\n    \"\"\"Input for FileTool.\"\"\"\n    file_path: str = Field(..., description=\"Path of the file, include file name\")\nclass MyCreateFileTool(BaseFileToolMixin, BaseTool):\n    name: str = \"create_file_tool\"\n    args_schema: Type[BaseModel] = MyCreateToolInput  # Accepts a single string argument\n    description: str = \"Create a new file\"\n    FILE_PATH_STORE = (\n        current_dir + \"/db/file_helper.txt\"\n    )  # /Users/wayne/Desktop/Gothub/db/file_helper.txt",
        "detail": "gots.src.gots.tools.scoped_file_tools_funcs",
        "documentation": {}
    },
    {
        "label": "MyCreateFileTool",
        "kind": 6,
        "importPath": "gots.src.gots.tools.scoped_file_tools_funcs",
        "description": "gots.src.gots.tools.scoped_file_tools_funcs",
        "peekOfCode": "class MyCreateFileTool(BaseFileToolMixin, BaseTool):\n    name: str = \"create_file_tool\"\n    args_schema: Type[BaseModel] = MyCreateToolInput  # Accepts a single string argument\n    description: str = \"Create a new file\"\n    FILE_PATH_STORE = (\n        current_dir + \"/db/file_helper.txt\"\n    )  # /Users/wayne/Desktop/Gothub/db/file_helper.txt\n    def _run(self, file_path: str) -> str:\n        append = False\n        write_path = self.get_relative_path(file_path)  # root_dir + \"/file_path\"",
        "detail": "gots.src.gots.tools.scoped_file_tools_funcs",
        "documentation": {}
    },
    {
        "label": "MyFillToolInput",
        "kind": 6,
        "importPath": "gots.src.gots.tools.scoped_file_tools_funcs",
        "description": "gots.src.gots.tools.scoped_file_tools_funcs",
        "peekOfCode": "class MyFillToolInput(BaseModel):\n    \"\"\"Input for FileTool.\"\"\"\n    text: str = Field(..., description=\"content to write to file\")\nclass MyFillFileTool(BaseFileToolMixin, BaseTool):\n    name: str = \"write_file_tool\"\n    args_schema: Type[BaseModel] = MyFillToolInput\n    description: str = \"Write to a file\"\n    FILE_PATH_STORE = (\n        current_dir + \"/db/file_helper.txt\"\n    )  # /Users/wayne/Desktop/Gothub/db/file_helper.txt",
        "detail": "gots.src.gots.tools.scoped_file_tools_funcs",
        "documentation": {}
    },
    {
        "label": "MyFillFileTool",
        "kind": 6,
        "importPath": "gots.src.gots.tools.scoped_file_tools_funcs",
        "description": "gots.src.gots.tools.scoped_file_tools_funcs",
        "peekOfCode": "class MyFillFileTool(BaseFileToolMixin, BaseTool):\n    name: str = \"write_file_tool\"\n    args_schema: Type[BaseModel] = MyFillToolInput\n    description: str = \"Write to a file\"\n    FILE_PATH_STORE = (\n        current_dir + \"/db/file_helper.txt\"\n    )  # /Users/wayne/Desktop/Gothub/db/file_helper.txt\n    def _run(self, text: str) -> str:\n        if not os.path.exists(self.FILE_PATH_STORE):\n            return \"Error: No file has been created yet. Return to create a file.\"",
        "detail": "gots.src.gots.tools.scoped_file_tools_funcs",
        "documentation": {}
    },
    {
        "label": "current_dir",
        "kind": 5,
        "importPath": "gots.src.gots.tools.scoped_file_tools_funcs",
        "description": "gots.src.gots.tools.scoped_file_tools_funcs",
        "peekOfCode": "current_dir = os.getcwd()\n# /Users/wayne/Desktop/Gothub\nclass MyCreateToolInput(BaseModel):\n    \"\"\"Input for FileTool.\"\"\"\n    file_path: str = Field(..., description=\"Path of the file, include file name\")\nclass MyCreateFileTool(BaseFileToolMixin, BaseTool):\n    name: str = \"create_file_tool\"\n    args_schema: Type[BaseModel] = MyCreateToolInput  # Accepts a single string argument\n    description: str = \"Create a new file\"\n    FILE_PATH_STORE = (",
        "detail": "gots.src.gots.tools.scoped_file_tools_funcs",
        "documentation": {}
    },
    {
        "label": "langchain.debug",
        "kind": 5,
        "importPath": "gots.src.gots.main_old",
        "description": "gots.src.gots.main_old",
        "peekOfCode": "langchain.debug = True\ncwd = os.getcwd()\ngithub_token = os.environ.get(\"GITHUB_TOKEN\")\nopenai_api_key = os.environ.get(\"OPENAI_API_KEY\")\nrepo_url = \"https://github.com/Git-of-Thoughts/Gothub.git\"\nlocal_dir = cwd\naccess_token = github_token\ngit = git_methods(repo_url, local_dir, access_token)\nhandler = MyCustomHandlerOne(git)\nllm = ChatOpenAI(",
        "detail": "gots.src.gots.main_old",
        "documentation": {}
    },
    {
        "label": "cwd",
        "kind": 5,
        "importPath": "gots.src.gots.main_old",
        "description": "gots.src.gots.main_old",
        "peekOfCode": "cwd = os.getcwd()\ngithub_token = os.environ.get(\"GITHUB_TOKEN\")\nopenai_api_key = os.environ.get(\"OPENAI_API_KEY\")\nrepo_url = \"https://github.com/Git-of-Thoughts/Gothub.git\"\nlocal_dir = cwd\naccess_token = github_token\ngit = git_methods(repo_url, local_dir, access_token)\nhandler = MyCustomHandlerOne(git)\nllm = ChatOpenAI(\n    temperature=0,",
        "detail": "gots.src.gots.main_old",
        "documentation": {}
    },
    {
        "label": "github_token",
        "kind": 5,
        "importPath": "gots.src.gots.main_old",
        "description": "gots.src.gots.main_old",
        "peekOfCode": "github_token = os.environ.get(\"GITHUB_TOKEN\")\nopenai_api_key = os.environ.get(\"OPENAI_API_KEY\")\nrepo_url = \"https://github.com/Git-of-Thoughts/Gothub.git\"\nlocal_dir = cwd\naccess_token = github_token\ngit = git_methods(repo_url, local_dir, access_token)\nhandler = MyCustomHandlerOne(git)\nllm = ChatOpenAI(\n    temperature=0,\n    model=\"gpt-3.5-turbo-0613\",",
        "detail": "gots.src.gots.main_old",
        "documentation": {}
    },
    {
        "label": "openai_api_key",
        "kind": 5,
        "importPath": "gots.src.gots.main_old",
        "description": "gots.src.gots.main_old",
        "peekOfCode": "openai_api_key = os.environ.get(\"OPENAI_API_KEY\")\nrepo_url = \"https://github.com/Git-of-Thoughts/Gothub.git\"\nlocal_dir = cwd\naccess_token = github_token\ngit = git_methods(repo_url, local_dir, access_token)\nhandler = MyCustomHandlerOne(git)\nllm = ChatOpenAI(\n    temperature=0,\n    model=\"gpt-3.5-turbo-0613\",\n    callbacks=[handler],",
        "detail": "gots.src.gots.main_old",
        "documentation": {}
    },
    {
        "label": "repo_url",
        "kind": 5,
        "importPath": "gots.src.gots.main_old",
        "description": "gots.src.gots.main_old",
        "peekOfCode": "repo_url = \"https://github.com/Git-of-Thoughts/Gothub.git\"\nlocal_dir = cwd\naccess_token = github_token\ngit = git_methods(repo_url, local_dir, access_token)\nhandler = MyCustomHandlerOne(git)\nllm = ChatOpenAI(\n    temperature=0,\n    model=\"gpt-3.5-turbo-0613\",\n    callbacks=[handler],\n    openai_api_key=openai_api_key,",
        "detail": "gots.src.gots.main_old",
        "documentation": {}
    },
    {
        "label": "local_dir",
        "kind": 5,
        "importPath": "gots.src.gots.main_old",
        "description": "gots.src.gots.main_old",
        "peekOfCode": "local_dir = cwd\naccess_token = github_token\ngit = git_methods(repo_url, local_dir, access_token)\nhandler = MyCustomHandlerOne(git)\nllm = ChatOpenAI(\n    temperature=0,\n    model=\"gpt-3.5-turbo-0613\",\n    callbacks=[handler],\n    openai_api_key=openai_api_key,\n)",
        "detail": "gots.src.gots.main_old",
        "documentation": {}
    },
    {
        "label": "access_token",
        "kind": 5,
        "importPath": "gots.src.gots.main_old",
        "description": "gots.src.gots.main_old",
        "peekOfCode": "access_token = github_token\ngit = git_methods(repo_url, local_dir, access_token)\nhandler = MyCustomHandlerOne(git)\nllm = ChatOpenAI(\n    temperature=0,\n    model=\"gpt-3.5-turbo-0613\",\n    callbacks=[handler],\n    openai_api_key=openai_api_key,\n)\ntools = [",
        "detail": "gots.src.gots.main_old",
        "documentation": {}
    },
    {
        "label": "git",
        "kind": 5,
        "importPath": "gots.src.gots.main_old",
        "description": "gots.src.gots.main_old",
        "peekOfCode": "git = git_methods(repo_url, local_dir, access_token)\nhandler = MyCustomHandlerOne(git)\nllm = ChatOpenAI(\n    temperature=0,\n    model=\"gpt-3.5-turbo-0613\",\n    callbacks=[handler],\n    openai_api_key=openai_api_key,\n)\ntools = [\n    read_directory_tree_tool,",
        "detail": "gots.src.gots.main_old",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 5,
        "importPath": "gots.src.gots.main_old",
        "description": "gots.src.gots.main_old",
        "peekOfCode": "handler = MyCustomHandlerOne(git)\nllm = ChatOpenAI(\n    temperature=0,\n    model=\"gpt-3.5-turbo-0613\",\n    callbacks=[handler],\n    openai_api_key=openai_api_key,\n)\ntools = [\n    read_directory_tree_tool,\n    read_one_file_tool,",
        "detail": "gots.src.gots.main_old",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "gots.src.gots.main_old",
        "description": "gots.src.gots.main_old",
        "peekOfCode": "llm = ChatOpenAI(\n    temperature=0,\n    model=\"gpt-3.5-turbo-0613\",\n    callbacks=[handler],\n    openai_api_key=openai_api_key,\n)\ntools = [\n    read_directory_tree_tool,\n    read_one_file_tool,\n    write_file_tool,",
        "detail": "gots.src.gots.main_old",
        "documentation": {}
    },
    {
        "label": "tools",
        "kind": 5,
        "importPath": "gots.src.gots.main_old",
        "description": "gots.src.gots.main_old",
        "peekOfCode": "tools = [\n    read_directory_tree_tool,\n    read_one_file_tool,\n    write_file_tool,\n]\nmrkl = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.OPENAI_MULTI_FUNCTIONS,\n    verbose=True,",
        "detail": "gots.src.gots.main_old",
        "documentation": {}
    },
    {
        "label": "mrkl",
        "kind": 5,
        "importPath": "gots.src.gots.main_old",
        "description": "gots.src.gots.main_old",
        "peekOfCode": "mrkl = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.OPENAI_MULTI_FUNCTIONS,\n    verbose=True,\n)\nmrkl.run(\"write me a fun python script file\")",
        "detail": "gots.src.gots.main_old",
        "documentation": {}
    },
    {
        "label": "WriteRepoInp",
        "kind": 6,
        "importPath": "gots.src.gots.repo_agent",
        "description": "gots.src.gots.repo_agent",
        "peekOfCode": "class WriteRepoInp(BaseModel):\n    repo: Repo\n    openai_api_key: str\n    extra_prompt: Optional[str]\n    class Config:\n        arbitrary_types_allowed = True\nclass WriteRepoOut(BaseModel):\n    new_branches: list[Head]\n    class Config:\n        arbitrary_types_allowed = True",
        "detail": "gots.src.gots.repo_agent",
        "documentation": {}
    },
    {
        "label": "WriteRepoOut",
        "kind": 6,
        "importPath": "gots.src.gots.repo_agent",
        "description": "gots.src.gots.repo_agent",
        "peekOfCode": "class WriteRepoOut(BaseModel):\n    new_branches: list[Head]\n    class Config:\n        arbitrary_types_allowed = True\nRepoAgent = Callable[[WriteRepoInp], WriteRepoOut]\ndef one_branch_mrkl(inp: WriteRepoInp) -> None:\n    match inp:\n        case WriteRepoInp(\n            repo=repo,\n            openai_api_key=openai_api_key,",
        "detail": "gots.src.gots.repo_agent",
        "documentation": {}
    },
    {
        "label": "one_branch_mrkl",
        "kind": 2,
        "importPath": "gots.src.gots.repo_agent",
        "description": "gots.src.gots.repo_agent",
        "peekOfCode": "def one_branch_mrkl(inp: WriteRepoInp) -> None:\n    match inp:\n        case WriteRepoInp(\n            repo=repo,\n            openai_api_key=openai_api_key,\n            extra_prompt=extra_prompt,\n        ):\n            pass\n    tools = build_scoped_file_tools(repo.working_dir)\n    git_callback_handler = GitCallbackHandler()",
        "detail": "gots.src.gots.repo_agent",
        "documentation": {}
    },
    {
        "label": "gots_repo_agent",
        "kind": 2,
        "importPath": "gots.src.gots.repo_agent",
        "description": "gots.src.gots.repo_agent",
        "peekOfCode": "def gots_repo_agent(inp: WriteRepoInp) -> WriteRepoOut:\n    \"\"\"\n    ! Should only modify what's permitted by inp\n    \"\"\"\n    match inp:\n        case WriteRepoInp(\n            repo=repo,\n            openai_api_key=openai_api_key,\n            extra_prompt=extra_prompt,\n        ):",
        "detail": "gots.src.gots.repo_agent",
        "documentation": {}
    },
    {
        "label": "langchain.debug",
        "kind": 5,
        "importPath": "gots.src.gots.repo_agent",
        "description": "gots.src.gots.repo_agent",
        "peekOfCode": "langchain.debug = True\nclass WriteRepoInp(BaseModel):\n    repo: Repo\n    openai_api_key: str\n    extra_prompt: Optional[str]\n    class Config:\n        arbitrary_types_allowed = True\nclass WriteRepoOut(BaseModel):\n    new_branches: list[Head]\n    class Config:",
        "detail": "gots.src.gots.repo_agent",
        "documentation": {}
    },
    {
        "label": "RepoAgent",
        "kind": 5,
        "importPath": "gots.src.gots.repo_agent",
        "description": "gots.src.gots.repo_agent",
        "peekOfCode": "RepoAgent = Callable[[WriteRepoInp], WriteRepoOut]\ndef one_branch_mrkl(inp: WriteRepoInp) -> None:\n    match inp:\n        case WriteRepoInp(\n            repo=repo,\n            openai_api_key=openai_api_key,\n            extra_prompt=extra_prompt,\n        ):\n            pass\n    tools = build_scoped_file_tools(repo.working_dir)",
        "detail": "gots.src.gots.repo_agent",
        "documentation": {}
    }
]
